name: Build and Push Image

on:
  push:
    branches:
      - refactor/terraform-implementation
    paths:
      - "services/**"
      - "terraform/**"
      - ".github/**"

  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag reference"
        required: true
        default: "refactor/terraform-implementation"

env:
  PROJECT_ID: "connecta-app-1" # TODO: update Google Cloud project id
  REGION: "us-central1" # TODO: update Cloud Run service region
  ENVIRONMENT: "dev"

jobs:
  list-services:
    name: List Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.list_services.outputs.services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List service directories and convert underscores to dashes
        id: list_services
        run: |
          # List the directories inside the services folder
          services=$(find services -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)

          # Ensure the output is formatted correctly as a JSON array for the matrix
          # Create a JSON array from the service names
          services_json=$(echo "$services" | jq -R . | jq -s .)

          # Debug the output to ensure it's correct
          echo "Formatted JSON services: $services_json"

          # Set the output correctly using GITHUB_OUTPUT
          # Use `jq -c` to compact the JSON into a single line
          echo "services=$(echo "$services_json" | jq -c .)" >> $GITHUB_OUTPUT

  build-container-image:
    name: Build Container Image
    needs: list-services
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.list-services.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"

        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v2"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.REGION }}-docker.pkg.dev"

      - name: Build and push Docker image for [${{ matrix.service }}]
        run: |
          # Convert underscores to dashes for the Docker image name
          image_name=$(echo "${{ matrix.service }}" | sed 's/_/-/g')
          echo "Building and pushing Docker image for '${{ matrix.service }}' as '$image_name'"
          cd services/${{ matrix.service }}
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/connecta-services/$image_name .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/connecta-services/$image_name

  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"

        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init # -backend-config="bucket=${{ secrets.TERRAFORM_BUCKET }}" -backend-config="prefix=${{ env.ENVIRONMENT }}"

      - name: Terraform Plan
        run: terraform plan -var-file="environments/${{ env.ENVIRONMENT }}.tfvars"

      - name: Terraform Apply
        run: terraform apply -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" -auto-approve
