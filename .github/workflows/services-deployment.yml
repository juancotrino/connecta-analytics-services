name: Build and Push Image

on:
  push:
    branches:
      - refactor/terraform-implementation
    paths:
      - "services/**"
      - "terraform/**"
      - ".github/**"

  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag reference"
        required: true
        default: "refactor/terraform-implementation"

env:
  PROJECT_ID: "connecta-app-1" # TODO: update Google Cloud project id
  REGION: "us-central1" # TODO: update Cloud Run service region
  ENVIRONMENT: "dev"

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      sanitized_services: ${{ steps.detect.outputs.sanitized_services }}
      folder_path_services: ${{ steps.detect.outputs.folder_path_services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect Changed Services Source Codes
        id: detect
        run: |
          # Fetch the full branch history to ensure we can diff properly
          git fetch --unshallow || true
          git fetch origin dev

          # Ensure services/ directory exists
          if [ ! -d "services" ]; then
            echo "No 'services/' directory found. Exiting."
            echo "sanitized_services=[]" >> $GITHUB_OUTPUT
            echo "folder_path_services=[]" >> $GITHUB_OUTPUT
            echo "deleted_services=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Handle first commit scenario
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "First commit detected, deploying all services."
            CHANGED_SERVICES=$(ls services)
          else
            # Find directories that changed within services/
            CHANGED_SERVICES=$(git diff --name-only HEAD~1 HEAD | grep -o 'services/[^/]*/' | uniq | xargs -n1 basename || echo "")
          fi

          # Filter out deleted services
          EXISTING_SERVICES=$(ls services)
          CHANGED_SERVICES=$(echo "$CHANGED_SERVICES" | grep -Fx -f <(echo "$EXISTING_SERVICES") || echo "")

          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No services changed."
            echo "sanitized_services=[]" >> $GITHUB_OUTPUT
            echo "folder_path_services=[]" >> $GITHUB_OUTPUT
          else
            # Replace underscores with dashes in service names
            SANITIZED_SERVICES=$(echo "$CHANGED_SERVICES" | sed 's/_/-/g' | jq -R -s -c 'split("\n")[:-1]')
            FOLDER_PATH_SERVICES=$(echo "$CHANGED_SERVICES" | jq -R -s -c 'split("\n")[:-1]')
          fi

          echo "Changed services (sanitized): $SANITIZED_SERVICES"
          echo "Changed services (folder paths): $FOLDER_PATH_SERVICES"

          echo "sanitized_services=${SANITIZED_SERVICES}" >> $GITHUB_OUTPUT
          echo "folder_path_services=${FOLDER_PATH_SERVICES}" >> $GITHUB_OUTPUT

          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

  build-container-image:
    name: Build Container Image
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.folder_path_services && needs.detect-changes.outputs.folder_path_services != '[]' }}
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitized_service: ${{ fromJson(needs.detect-changes.outputs.sanitized_services) }}
        folder_path_service: ${{ fromJson(needs.detect-changes.outputs.folder_path_services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"

        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v2"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.REGION }}-docker.pkg.dev"

      - name: Build and push Docker image [${{ matrix.folder_path_service }}]
        run: |
          echo "Building and pushing Docker image for '${{ matrix.folder_path_service }}' as '${{ matrix.sanitized_service }}''"
          cd services/${{ matrix.folder_path_service }}
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/connecta-services/${{ matrix.sanitized_service }} .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/connecta-services/${{ matrix.sanitized_service }}

  terraform:
    name: Terraform Deployment
    needs:
      - detect-changes
      - build-container-image
    if: ${{ always() }}
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"

        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}" # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}" # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init - Apply
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ env.REGION }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_service_account_email: ${{ secrets.APP_SERVICE_ACCOUNT }}
          TF_VAR_changed_services: ${{ env.CHANGED_SERVICES }}
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}-${{ env.ENVIRONMENT }}" \
            -backend-config="prefix=${{ secrets.TF_BACKEND_PREFIX }}"
          terraform apply -auto-approve
